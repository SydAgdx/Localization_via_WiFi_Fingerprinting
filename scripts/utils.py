#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May  6 10:37:16 2019

@author: Ryan Clark

File Description:
The utility file used to load data, format results, and save results.
"""

# Libraries
from time import time
from os.path import exists, join
from os import mkdir
from numpy import mean, std
from pandas import read_csv

def load_data(train_fname, val_fname, N, DROP_COLUMNS=None):
    '''
    Loads the training and validation data into a dataframe and splits it into
    x and y subsets on feature "N" for the data and labels respectively.
    "DROP_COLUMNS" are also used to remove columns that do not provide much 
    use. Lastly, this function assumes that the data is stored in a "data/" 
    directory.
    
    Parameters: train_fname  : (str) file name of training data - *.csv
                val_fname    : (str) file name of validation data - *.csv
                N            : (int) number of features
                DROP_COLUMNS : (list) column names to be removed from data
                
    Returns   : x_train      : (Dataframe) training data
                y_train      : (Dataframe) training labels
                x_test       : (Dataframe) test data
                y_test       : (Dataframe) test labels
    '''
    tic = time() # Start function performance timer
    
    training_data = read_csv("data/" + train_fname)
    validation_data = read_csv("data/" + val_fname)
    
    if DROP_COLUMNS: # Drop useless columns if there are any specified.
        training_data.drop(columns=DROP_COLUMNS, inplace=True)
        validation_data.drop(columns=DROP_COLUMNS, inplace=True)
    
    x_train = training_data.iloc[:, :N]
    y_train = training_data.iloc[:, N:]
    
    x_test = validation_data.iloc[:, :N]
    y_test = validation_data.iloc[:, N:]
    
    toc = time() # Report function performance timer
    print("Data Load Timer: %.2f seconds" % (toc-tic))
    
    return x_train, y_train, x_test, y_test

def save_fig(fig, model_name, phone_id, plot_type):
    '''
    This function saves each plot generated by the "phone_id" in the 
    output/<model_name>/<plot_type> directory. If the directory doesn't exist,
    then it creates it. WARNING: This function will overwrite previous plots 
    that are of the same model name and phone id.
    
    Parameters: fig           : (Figure)
                model_name    : (str)
                phone_id      : (int)
                plot_type     : (str)
                
    Returns:    None
    '''
    dir_path = "output"
    if not exists(dir_path):
        mkdir(dir_path)
    
    dir_path = join(dir_path, model_name)
    if not exists(dir_path):
        mkdir(dir_path)
        
    dir_path = join(dir_path, plot_type)
    if not exists(dir_path):
        mkdir(dir_path)
        
    file_name = "PhoneID_%d.png" % phone_id
    file_path = join(dir_path, file_name)
    fig.savefig(file_path, bbox_inches='tight')
    
def create_subreport(errors, M, phone_id=None):
    '''
    This function takes the set of errors and formats their output into a
    string so that it can be reported to the console, saved to a text file, or
    both.
    
    Parameters: errors     : (tuple) contains the four types of errors
                M          : (int) number of row elements in set
                phone_id   : (int or None) None implies that its a total report
                
    Returns:    subreport  : (str)
    '''
    build_missclass, floor_missclass, coords_error, standard_error = errors
    
    mean_c = mean(coords_error)
    std_c = std(coords_error)
    
    build_error = build_missclass / M * 100 # Percent Error
    floor_error = floor_missclass / M * 100 # Percent Error
    
    if phone_id is not None:
        str1 = "Phone ID: %d" % phone_id
    else:
        str1 = "Totals Output:"
    str2 = "Mean Coordinate Error: %.2f +/- %.2f meters" % (mean_c, std_c)
    str3 = "Standard Error: %.2f meters" % standard_error
    str4 = "Building Percent Error: %.2f%%" % build_error
    str5 = "Floor Percent Error: %.2f%%" % floor_error
    
    subreport = '\n'.join([str1, str2, str3, str4, str5])
    
    return subreport
    
def save_report(model_name, report, report_type):
    '''
    This function saves the final report for the model in the
    output/<model_name>/ directory. If the directory doesn't exist, then it
    creates it. WARNING: This function will overwrite previous reports that are
    of the same model name.
    
    Parameters: model_name  : (str)
                report      : (str)
                report_type : (str) Totals or phone_id
                
    Returns:    None
    '''
    dir_path = "output"
    if not exists(dir_path):
        mkdir(dir_path)
    
    dir_path = join(dir_path, model_name)
    if not exists(dir_path):
        mkdir(dir_path)
    
    file_name = "%s_%s.txt" % (model_name, report_type)
    file_path = join(dir_path, file_name)
    with open(file_path, 'w') as text_file:
        text_file.write(report)
    text_file.close()